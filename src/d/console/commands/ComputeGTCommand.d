module console.commands.ComputeGTCommand;

import console.commands.GenericCommand;
import console.commands.DefaultCommand;
import dataset.ComputeGroundTruth;
import dataset.Dataset;
import util.Logger;
import util.defines;
import util.Utils;
import util.Allocator;

static this() {
 	register_command!(ComputeGTCommand);
}

class ComputeGTCommand : DefaultCommand
{
	public static string NAME = "compute_gt";
	string inputFile;
	string testFile;
	string matchFile;
	uint skip;
	uint nn;
    uint count;
	bool byteFeatures;
	
	this(string name) 
	{
		super(name);
		register(inputFile,"i","input-file", "","Input dataset file.");
		register(testFile,"t","test-file", "","Test dataset file (if not present, generated by sampling from the imput dataset.");
 		register(matchFile,"m","match-file", "match.dat", "Match file to be generated.");
 		register(skip,"K","skip", 0, "Skip the first k matches.");
 		register(nn,"n","nn", 1, "How many NN to compute (default 1).");
 		register(count,"c","count", 1000, "How many features to sample in test set if needed. (default: 1000)");
 		register(byteFeatures,"B","byte-features", 0, "Use byte sized feature elements.");
 		
 		description = "Computes the ground-truth given an input dataset and a test dataset. If test dataset is not present it is"
 					" sampled form the input dataset";
	}

	void executeWithType(T)()
	{
        Dataset!(T) inputData;
        Dataset!(T) testData;

        logger.info("Reading input data from "~inputFile);
        inputData = new Dataset!(T)();
        inputData.readFromFile(inputFile);

        auto path = new FilePath(testFile);
        if (path.exists() && !path.isFolder()) {
            logger.info("Reading test data from "~testFile);
            testData = new Dataset!(T)();
            testData.readFromFile(testFile);
        } 
        else {
            logger.info("Sampling test data from input data and writing to "~testFile);
            testData = inputData.sample(count);
            testData.writeToFile(testFile);

            logger.info("Writing input data to "~("new_"~inputFile));
            inputData.writeToFile("new_"~inputFile,"bin");
        }

        int matches[][];
        logger.info("Computing ground truth");
        matches = computeGroundTruth!(T,T)(inputData, testData, nn, skip);

        logger.info("Writing matches to "~matchFile);
        //		Dataset!(int).handler.write(matchFile,matches,"dat");
        writeMatches(matchFile,matches);
        free(matches);

	}
	
	void execute() 
	{
		if (byteFeatures) {
			executeWithType!(ubyte)();
		} else {
			executeWithType!(float)();
		}		
	}
	

	
}
